---
title: "sinatra的基本用法和特性"
date: 2015-09-27 19:00:00
---
本文是我最近阅读《Sinatra: Up and Running》的一些重要知识的汇总和心得。
如果和我一样在学习Rails时遇到困难觉得不顺的朋友，可以尝试从sinatra学起。
由于sinatra的中文文档很少，我在这里也希望我能通过自己的一些微薄之力可以帮助到自己和喜欢Ruby的人去更好地理解学习Sinatra。
对sinatra和padrino感兴趣的朋友也可以自己去查阅这本英文书籍。

####sinatra中的configure方法
在sinatra中，提供了一个名为configure的方法来对各项配置进行操作，你只需要向configure方法传入一个方法块即可
```ruby
configure do
#block content
end
```

####向视图中传递数据
后台的数据可以通过实例变量向对应的视图中进行传递(这点和Rails一样)
```ruby
get '/view' do
@name = 'sinatra'
erb :test
end
```
在视图中，以erb为例，可以通过<%= @name %>调用后台的值

####sinatra中的简单文件结构
静态文件存储在public文件夹下，public文件夹需要手动创建。下代码会加载public文件夹下的hello.html文件
```ruby
get '/hello.html' do
'This will show you the public/hello.html'
end
```
视图文件存储在views文件夹下，views文件夹需要手动创建。
这段代码会在访问/test的路劲时加载views/test下的视图（使用的是erb模板，当然也可以使用别的模板引擎）
```ruby
get '/test' do
erb :test
end
```

####sinatra中的过滤器
sinatra中过滤器(filter)的配置，通过before和after两个方法起到过滤器的作用。其中before在执行前调用，after在执行后调用。
```ruby
before do
@value = 'before'
end  
get '/' do
"The value is #{@value}."
end <br/>
after do
'All over.'
end
```
你也可以给before和after传递相应参数，参数为url，例如before '/index' {...}便会在你请求index前执行

####异常处理
众所周知，在http协议中，400-499是访问错误，500-599是服务器错误，而比较常见的错误代码可能大家最熟悉的就是“臭名昭著”的404了
不用担心，作为一个使用sintra开发者，可以通过向not\_found方法传递一个代码块，很简单地对404进行异常处理。
```ruby
not\_found do
'This is a 404 page. You can write anything you want here.'
end
```

对500错误处理，通过error方法
```ruby
get '/div_by_zero' do
0 / 0
end  
error do
'You have done something wrong.'
end
```

####sinatra中的session
通过调用configure的代码块来设置session，只要通过将sessions作为参数传入enable代码块，
你便可以通过session存储和传输数据
```ruby
configure do
enable :sessions
end  
get '/set\_session' do
session[:foo] = 'This is a session'
end <br/>
get 'get\_session' do
"The session is #{session[:foo]}"
end
```

sinatra也会在应用启动时通过一个秘钥对session进行加密，当然你也可以自己设置这个秘钥的值
```ruby
configure do
set :session_secret, 'your_custom_vlaue'
end
```

如果你想关闭session，例如在一个系统中对用户进行安全退出操作，可以通过session.clear进行操作
```ruby
get '/logout' do
session.clear
#回到主界面
redirect '/index'
end
```

####sinatra中的cookie
通常来说一个session的周期是在你关闭浏览器时结束，而cookie则会在你本地保存一定的时间。
sinatra和很多web开发工具一样，也可以设置cookie。sinatra中设置cookie最简单的方法就是response.set\_cookie，
移除cookie的方法也很简单response.delete\_cookie。
```ruby
get '/' do
# response.set_cookie 方法的第一个参数是cookie的名称，第二个是cookie的值
response.set_cookie "foo", "value"
"Cookie set. Would you like to <a href='/read'>read it</a>?"
end  
get '/read' do
"Cookie has a value of: #{request.cookies['foo']}."
end  
get '/delete' do
response.delete_cookie "foo" "Cookie has been deleted."
end
```
