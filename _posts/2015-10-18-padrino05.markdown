---
title: 优雅的padrino————脚手架
date: 2015-10-18
---
## Generator
在Rails推出之后，很多敏捷web开发框架都提供了generator的这样一个功能，Padrino也一样。
generator可以通过你在命令行里的指令快速生成或者指定项目有关的一系列组件，大大提高开发效率。
不过和Rails不同的是，Padrino的generator并没有限制你去使用指定的模板引擎、ORM框架、测试框架等，所有的这些组件你都可以自己去指定。
generators的基础用法
<pre><code>
$ padrino g project <the_app_name> </path/to/create/app> --<component-name><value>
</code></pre>

你可以这样最简洁地生成一个padrino项目
<pre><code>
$ padrino g porject demo_project
</code></pre>

也可以指定你需要使用的组件
<pre><code>
$ padrino g project demo_project -t shoulda -e haml -c sass -s jquery -d activerecord
</code></pre>

如果你有不想使用的功能模块，也可以通过设置参数不去使用。
下列代码指定不使用测试单元。
<pre></code>
$ padrino g porject demo_project --test none
</code></pre>

你也可以通过--app(或者-n)参数给你的项目设置一个别名
<pre><code>
$ padrino g project --app mypadrino
</code></pre>

##Generator常用指令  
###生成项目时的配置
-b: 执行bundle install  
-n: 为项目设置别名  
-r: 项目生成位置，默认为.（当前目录）  
-a: 指定项目所使用的数据库，默认为sqlite。(例：通过 -a mysql ，可以指定使用mysql数据库)  
###常用组件设置
-d: 配置ORM框架，默认为空，可选参数mongoid, activerecord, datamapper等。(这里我只列出了常用的)
-t: 设置测试工具，默认为空，可选参数bacon, shoulda, cucumber, riot, rspec, minitest, steak。
-s: 设置脚本，默认为空，可选参数prototype, rightjs, jquery, mootools, extcore, dojo
-e: 设置所使用前端模板，默认为slim。可选参数erb, haml, slim, liquid。
-c: 设置所使用css样式类型，默认为空，可选参数sass, less, scss, compass。
-m: 设置mock，默认为空，可选参数rr, mocha。

## Plugin Generator
这是一个非常迷人的功能，Plugin Generator可以让你的项目新建在一个以现有项目为原型的模板上。听上去太棒了！
###通过--template参数指定模板
你可以通过你本机上现有的模板来生成一个padrino项目
<pre><code>
$ padrino g project my_project --template path/to/my_template.rb
</pre><code>

也可以通过url来指定使用线上的模板
<pre><code>
$ padrino g project my_project --template http://gist.github.com/356156
</code></pre>

你甚至可以使用官方的博客程序(看到这里我忍不住直接去尝试了)
<pre><code>
$ padrino g project my_project --template sampleblog
</code></pre>

###插件的使用
你可以让现有的模板变成你项目里的一个插件(首先你要进入你项目的app目录)
<pre><code>
$ padrino g plugin path/to/my_plugin.rb
</code></pre>

你也可以使用官方仓库里的插件(虽然目前里面只有5个插件)
<pre><code>
$ padrino g plugin hoptoad
</code></pre>

##Controller(控制器) Generator
在“传统”的web开发框架下，有时候会有很多不必要的重复性代码，在控制器的编写时也一样。
Rails提供了generator去生成控制器，padrino也可以。
下面生成一个名为Admin的控制器
<pre><code>
$ padrino g controller Admin
</code></pre>
这样会在app/controllers文件夹中生成一个admin.rb文件，同时会生成app/views/admin目录，生成相应helper文件。
如果你指定了测试单元的话，也会在测试单元里生成对controller和helper的测试文件。  
通过-a参数后跟上子应用名称，为你的子应用生成控制器
<pre><code>
$ padrino g controller Admin -a sub_app
</code></pre>
你也可以为你所要生成的控制器指定动作
<pre><code>
$ padrino g controller Admin get:index post:create
</code></pre>
一个默认的路由也会随着控制器指定的动作生成，例如，在如上的代码中，会生成与控制器动作对应的路由(/admin/index)。  
如果你想删除一个控制器，通过指定-d参数进行删除。下列代码会删除Admin控制器相关的所有文件。
<pre><code>
$ padrino g controller Admin -d
</code></pre>

##Model(模型) Generator
Generator也可以快捷地生成Model，并且值得注意的是，model generator是为你建立应用时所指定的ORM组件和测试框架量身定制的。
在这里，你需要了解一个非常重要的事。在padrino中使用model generator是为了能让你的应用顺利运行。
如果你在一个padrino应用中没有使用model generator去生成model，你的应用可能无法正常工作。  
最简单一个model generator，生成一个名为User的模型。（这里遵循约定，首字母大写）
<pre><code>
$ padrino g model User
</code></pre>
你也可以指定模型中的字段
<pre><code>
$ padrino g model User name:string age:integer
</code></pre>
在执行model generator的相关指令后，会在app/models文件夹下生成相应模型文件，在db/migrations下生成数据迁移文件，在test/models下生成测试文件。  
喔，如果你想删除一个model，那么和controller一样，在末尾加上-d参数。
<pre><code>
$ padrino g model User -d
</code></pre>

##Migration(数据迁移) Generator
generator也提供了对数据迁移文件(migration)的支持。生成的migration也是和你的ORM组件完美契合的。
和model相似，如果你想让你的应用正常运行，还是用generator去生成migration吧~
你可以像这样去生成一个简单的migration。(这里遵循约定，驼峰命名和首字母大写)
<pre><code>
$ padrino g migration AddFieldsToUsers
</code></pre>
你也可以通过generator指定要在migration中生成的字段。
<pre><code>
$ padrino g miration AddFieldsToUsers login_time:datetime password:string
</code></pre>
数据迁移文件会在db/migrations目录下生成。
如果你想删除migration文件，类似地，使用—d参数。在这里不做过多演示。

##Sub App(子应用) Generator
在一个padrino项目中可以生成一个子应用。
<pre><code>
$ padrino g app one
</code></pre>
这时候在你的项目根目录下会生成一个名为one的文件夹。你子应用的相关信息都存放在其中。
(这里说明一下，你的子应用首字母无论你写的是大写还是小写，最后生成的目录都会是小写字母开头。)
你也可以使用generator为子应用生成相关controller、model等。
<pre></code>
$ padrino g controller --app one
</code></pre>
##Compoment(组件) Generator
你也可以生成相应的组件。  
输入如下指令可以查看和组件相关的帮助文件。
<pre><code>
$ padrino g component
</code></pre>
以指定数据库为mysql为例，指定组件
<pre><code>
$ padrino g component -a mysql12
</code></pre>

##Padrino Admin
Padrino提供了一个精美的Admin接口，这也相当于是一个子应用，可以使用这个作为你的后台管理应用。
这也是个非常有趣的功能，我们一起来看一看~
首先新建一个应用
<pre><code>
$ padrino g admin_test
$ cd admin_test
</code></pre>
然后再通过generator生成admin应用
<pre><code>
$ padrino g admin
</code></pre>
接下来，想让admin能顺利运行。你需要执行数据迁移在数据库中生成相应数据表。
(这里提一下，你可以使用db:migrate执行数据迁移。当然，如果你使用的ORM组件是ActiveRecord，你也可以通过ar:migrate执行数据迁移)
<pre><code>
$ rake db:migrate
</code></pre>
其次，你要使Admin，需要一个用户名和密码，这时候就需要在数据库中生成相应记录。
<pre><code>
$ rake seed
</code></pre>
执行这条指令后，在控制台中会提示你输入登陆邮箱和密码。  
之后你便可以访问http://localhost:3000/admin 进入padrino精美的后台并且登陆。
